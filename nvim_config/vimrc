set nocompatible
filetype off
syntax enable

" Converted from vundle to vim-plug
" Install vim-plug if we don't already have it
" THis may not be best practice? What do I know, it works
if empty(glob('~/.config/nvim/autoload/plug.vim'))
silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" ---- General plugins
"I love nerdtree for moving around files/directories
Plug 'preservim/nerdtree'
"Nerdtree operates on visual selections
Plug 'PhilRunninger/nerdtree-visual-selection'
"Vim surround is how I use the "i" to get a word from interior. I don't know
"what else it does
Plug 'tpope/vim-surround'
" This is deprecated and I need to get another syntax checker like ALE (or
" LSPs?)
Plug 'vim-syntastic/syntastic'
" Sane rust defaults
Plug 'rust-lang/rust.vim'

" ----- Appearance
"  Color
"Plug 'morhetz/gruvbox' but in neovim!
Plug 'ellisonleao/gruvbox.nvim'

"  Bottom line thing
Plug 'itchyny/lightline.vim'

" ----- Git plugins
" Git in nerdtree
Plug 'Xuyuanp/nerdtree-git-plugin'
" Git in side number things
Plug 'airblade/vim-gitgutter'
" Gives access to the :Git command. I like the idea but normally just use tmux. Ha!
Plug 'tpope/vim-fugitive'

" ----- AI plugins
Plug 'github/copilot.vim'

" ----- Neovim lsp basic configs
Plug 'neovim/nvim-lspconfig'
" Makes lsp colors look better
Plug 'folke/lsp-colors.nvim'

" ----- Jupyter plugins
" Plug 'szymonmaszke/vimpyter' "Unfortunately is vim 8 only

" ----- Old -----
" Plug 'python-mode/python-mode.git'
" Plug 'vimwiki/vimwiki'
call plug#end()


filetype plugin indent on

"Fave colors
colorscheme gruvbox
set t_Co=256
let g:gruvbox_termcolors = 256
let g:gruvbox_italic=1
set bg=dark
highlight link Operator GruvboxBlue

" Git gutter edits
set updatetime=100

" Syntastic options
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_mode_map = {'mode':'passive'}

let g:syntastic_python_checkers = ['pylint'] ", 'pycodestyle']
let g:syntastic_python_checkers = ['pylint'] ", 'pycodestyle']
let g:syntastic_javascript_checkers = ['jslint'] ", 'pycodestyle']
"let g:syntastic_cpp_checkers = ['clang_tidy', 'gcc']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1

" Allows syntastic to show when YCM isnt working
let g:ycm_show_diagnostics_ui = 0

" Allows use of virtualenv
let g:ycm_python_binary_path = 'python'

"Set  standards ( including number)
set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab
set nrformats-=octal
set number
set relativenumber
set encoding=utf-8

"Tabs are just spaces
set expandtab

"Trying out cursorline
set cursorline 

" No shift to commands and repeat ; for repeats
map ; :
noremap ;; ;

" Enable code folding
set foldmethod=indent
set foldlevel=99
nnoremap <space> za

" For speed
set lazyredraw

" Widths
set tabstop=4
set softtabstop=4
set shiftwidth=4

"Copied for c since I'm lazy
au BufNewFile,BufRead *.c, *.cpp
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set fileformat=unix |
    \ set colorcolumn=+1  |
    \ syntax on

"language specific tabbing and width constraints
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set fileformat=unix |
    \ set colorcolumn=+1 |
    \ syntax on

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 


"Move vertically even in long lines
nnoremap j gj
nnoremap k gk

"Move through navigation panes easy
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Key Command to toggle NERDtree
nnoremap <C-n> :NERDTreeToggle <Enter>

"Navigate  location list
nnoremap ]l :lnext <Enter>
nnoremap [l :lprevious <Enter>

" I don't remember what this does
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match ErrorMsg /\s\+$/

set incsearch

set laststatus=2
set ruler
set wildmenu
set display+=lastline
set autoread
set sessionoptions-=options

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
  set t_Co=256
endif

" To go up one screen
inoremap <C-U> <C-G>u<C-U>

" Full path in lightline
let g:lightline = {
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ }
      \ }

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" To allow lsp and gitgutter to play nice - up to 2 signs
set signcolumn=auto:2
